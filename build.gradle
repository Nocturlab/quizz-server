buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}
plugins {
    id 'io.franzbecker.gradle-lombok' version '1.8'
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'jacoco'
}

apply plugin: 'war'
apply plugin: 'io.spring.dependency-management'

version '1.10.0'

bootJar {
    mainClassName = 'fr.nocturlab.Application'
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5'
    implementation group: 'javax.servlet', name: 'jstl', version: 'latest.release'
    implementation group: 'taglibs', name: 'standard', version: 'latest.release'
    implementation group: 'org.eclipse.jdt.core.compiler', name: 'ecj', version: 'latest.release'
	implementation group: 'org.postgresql', name: 'postgresql'
	implementation group: 'org.flywaydb', name: 'flyway-core'
	implementation group: 'org.hibernate', name: 'hibernate-core'
    implementation group: 'com.sendgrid', name: 'sendgrid-java', version: '4.3.0'
    implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.28'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: 'latest.release'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: 'latest.release'
    testImplementation group:'junit', name: 'junit', version: '4.12'
}

task showCoverage {
    dependsOn jacocoTestReport
    String coverage
    doFirst {
        def report = file("${buildDir}/reports/jacoco/test/html/index.html")
        coverage = report.text
        // appliquer la regex avec un replace
        coverage = coverage.replaceFirst('^.*<tfoot>((?!ctr2).)+ctr2"[^>]*>[^0-9]?([0-9]+)[^0-9]?%<.*$', '$2').trim();
    }
    doLast {
        // afficher le rÃ©sultat
        println "Coverage: ${coverage}%"
    }
}

test.finalizedBy showCoverage
